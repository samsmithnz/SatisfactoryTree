@page "/"

<PageTitle>Home</PageTitle>

@using SatisfactoryTree.Logic
@using SatisfactoryTree.Logic.Extraction
@using SatisfactoryTree.Logic.Models
@using SatisfactoryTree.Web.Services
@inject HttpClient Http
@inject PlanService PlanService
@implements IDisposable

@code {
	FactoryCatalog? factoryCatalog;
	private Plan? plan;
	private Factory? screwsFactory;
	private Factory? reinforcedPlatesFactory;
	private bool isLoading = true;
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			factoryCatalog = await Http.GetFromJsonAsync<FactoryCatalog>("content/gameData.json");
			if (factoryCatalog == null)
			{
				throw new Exception("FactoryCatalog could not be loaded or found");
			}
			plan = new();
			screwsFactory = new(1, "Screws factory");
			screwsFactory.ExportedParts.Add(new(new() { Name = "IronScrew", Quantity = 12 }));
			plan.Factories.Add(screwsFactory);
			reinforcedPlatesFactory = new(2, "Reinforced Iron Plates factory");
			reinforcedPlatesFactory.ExportedParts.Add(new(new() { Name = "IronPlateReinforced", Quantity = 1 }));
			reinforcedPlatesFactory.ImportedParts.Add(1, new(1, "Screws factory", new() { Name = "IronScrew", Quantity = 12 }));
			plan.Factories.Add(reinforcedPlatesFactory);

			//Calculate the production
			plan.UpdatePlanCalculations(factoryCatalog);

			// Update the PlanService so NavMenu can access the plan
			PlanService.FactoryCatalog = factoryCatalog;
			PlanService.Plan = plan;

			isLoading = false;
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			isLoading = false;
		}
	}

	protected override void OnInitialized()
	{
		PlanService.PlanChanged += OnPlanChanged;
	}

	private void OnPlanChanged()
	{
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		PlanService.PlanChanged -= OnPlanChanged;
	}

	private string GetFactoryAnchor(Factory factory)
	{
		// Create a URL-friendly anchor from the factory name (same logic as NavMenu)
		return factory.Name.ToLowerInvariant()
			.Replace(" ", "-")
			.Replace("'", "")
			.Replace("&", "and")
			.Replace("/", "-")
			.Replace("\\", "-")
			.Replace("(", "")
			.Replace(")", "");
	}
}

@if (isLoading)
{
	<p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">
		<strong>Error:</strong> @errorMessage
	</div>
}
else if (PlanService.Plan?.Factories != null)
{
	<h3>The plan</h3>
	@foreach (Factory factory in PlanService.Plan.Factories)
	{
		<div id="@GetFactoryAnchor(factory)" class="factory-section">
			<FactoryItems Factory="factory" FactoryCatalog="PlanService.FactoryCatalog" />
		</div>
	}
}
else
{
	<p>No data available.</p>
}
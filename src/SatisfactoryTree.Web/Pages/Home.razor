@page "/"

<PageTitle>Home</PageTitle>

@using SatisfactoryTree.Logic
@using SatisfactoryTree.Logic.Extraction
@using SatisfactoryTree.Logic.Models
@using SatisfactoryTree.Web.Services
@using SatisfactoryTree.Logic.Abstractions
@inject HttpClient Http
@inject IPlanService PlanService
@inject IJSRuntime JS
@implements IDisposable

@code {
	FactoryCatalog? factoryCatalog;
	private Factory? screwsFactory;
	private Factory? reinforcedPlatesFactory;
	private bool isLoading = true;
	private string? errorMessage;
	private int? factoryIdToScrollTo; // local cache for scrolling

	protected override async Task OnInitializedAsync()
	{
		try
		{
			factoryCatalog = await Http.GetFromJsonAsync<FactoryCatalog>("content/gameData.json");
			if (factoryCatalog == null)
			{
				throw new Exception("FactoryCatalog could not be loaded or found");
			}
			
			// Initialize the plan if it doesn't exist
			if (PlanService.Plan == null)
			{
				Plan plan = new();
				// screwsFactory = new(1, "Screws factory");
				// screwsFactory.ExportedParts.Add(new(new() { Name = "IronScrew", Quantity = 12 }));
				// plan.Factories.Add(screwsFactory);
				// reinforcedPlatesFactory = new(2, "Reinforced Iron Plates factory");
				// reinforcedPlatesFactory.ExportedParts.Add(new(new() { Name = "IronPlateReinforced", Quantity = 1 }));
				// reinforcedPlatesFactory.ImportedParts.Add(1, new(1, "Screws factory", new() { Name = "IronScrew", Quantity = 12 }));
				// plan.Factories.Add(reinforcedPlatesFactory);

				//Calculate the production
				plan.UpdatePlanCalculations(factoryCatalog);

				// Update the PlanService so NavMenu can access the plan
				PlanService.Plan = plan;
			}
			else
			{
				// Recalculate if plan already exists (in case new factories were added)
				RecalculatePlan();
			}
        
			// Update the PlanService so NavMenu can access the plan
			PlanService.FactoryCatalog = factoryCatalog;

			isLoading = false;
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			isLoading = false;
		}
	}

	protected override void OnInitialized()
	{
		PlanService.PlanChanged += OnPlanChanged;
	}

	public void Dispose()
	{
		PlanService.PlanChanged -= OnPlanChanged;
	}

	private void OnPlanChanged()
	{
		// Capture last added factory ID (if any) before recalculation
		factoryIdToScrollTo = PlanService.LastAddedFactoryId;
		RecalculatePlan();
		InvokeAsync(StateHasChanged);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (factoryIdToScrollTo.HasValue && PlanService.Plan != null)
		{
			var factory = PlanService.Plan.Factories.FirstOrDefault(f => f.Id == factoryIdToScrollTo.Value);
			if (factory != null)
			{
				string anchor = GetFactoryAnchor(factory);
				try
				{
					await JS.InvokeVoidAsync("scrollToFactoryAnchor", anchor);
				}
				catch { /* ignore JS errors */ }
			}
			PlanService.ClearLastAddedFactory();
			factoryIdToScrollTo = null;
		}
	}

	private void RecalculatePlan()
	{
		if (PlanService.Plan != null && factoryCatalog != null)
		{
			PlanService.Plan.UpdatePlanCalculations(factoryCatalog);
		}
	}

	private string GetFactoryAnchor(Factory factory)
	{
		// Create a URL-friendly anchor from the factory name (same logic as NavMenu)
		return factory.Name.ToLowerInvariant()
			.Replace(" ", "-")
			.Replace("'", "")
			.Replace("&", "and")
			.Replace("/", "-")
			.Replace("\\", "-")
			.Replace("(", "")
			.Replace(")", "");
	}
}

@if (isLoading)
{
	<p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">
		<strong>Error:</strong> @errorMessage
	</div>
}
else if (PlanService.Plan?.Factories != null)
{
	<h3>The plan</h3>
	@foreach (Factory factory in PlanService.Plan.Factories)
	{
		<div id="@GetFactoryAnchor(factory)" class="factory-section">
			<FactoryItems Factory="factory" FactoryCatalog="PlanService.FactoryCatalog" />
		</div>
	}
}
else
{
	<p>No data available.</p>
}
@using SatisfactoryTree.Logic.Models
@using SatisfactoryTree.Web.Services
@inject IFactoryItemDisplayService DisplayService
@inject PlanService PlanService
@implements IDisposable

@code {
    [Parameter]
    public Factory? Factory { get; set; }
    [Parameter]
    public Dictionary<string, Part>? Parts { get; set; }

    private bool isAddingExportedPart = false;
    private Part? selectedPartToExport = null;
    private double exportedQuantity = 1.0;

    protected override void OnInitialized()
    {
        PlanService.PlanChanged += OnPlanChanged;
    }

    private void OnPlanChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PlanService.PlanChanged -= OnPlanChanged;
    }

    private void OnPartSelected(Part selectedPart, Item item)
    {
        item.Name = selectedPart.Name ?? selectedPart.Name ?? "";
        StateHasChanged();
    }

    private Part? GetCurrentPart(Item item)
    {
        if (Parts == null) return null;
        Parts.TryGetValue(item.Name, out Part? part);
        return part;
    }

    private void StartAddingExportedPart()
    {
        isAddingExportedPart = true;
        selectedPartToExport = null;
        exportedQuantity = 1.0;
        StateHasChanged();
    }

    private void CancelAddingExportedPart()
    {
        isAddingExportedPart = false;
        selectedPartToExport = null;
        StateHasChanged();
    }

    private void OnExportPartSelected(Part selectedPart)
    {
        selectedPartToExport = selectedPart;
        StateHasChanged();
    }

    private async Task AddExportedPart()
    {
        if (Factory != null && selectedPartToExport != null)
        {
            try
            {
                // Use the PlanService method to properly add the exported part and update calculations
                PlanService.AddExportedPartToFactory(Factory.Id, selectedPartToExport.Name, exportedQuantity);
                
                isAddingExportedPart = false;
                selectedPartToExport = null;
                
                // Force a state change
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding exported part: {ex.Message}");
                // Optionally show error to user
            }
        }
    }

    private async Task RemoveExportedPart(ExportedItem exportedItem)
    {
        if (Factory != null)
        {
            try
            {
                PlanService.RemoveExportedPartFromFactory(Factory.Id, exportedItem.Item.Name);
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error removing exported part: {ex.Message}");
                // Optionally show error to user
            }
        }
    }
}

@if (Factory != null)
{
    <div class="factory-container">
        <h3><input type="text" value="@Factory.Name" class="form-control" /></h3>
        
        <p><b>Exported parts:</b></p>
        @if (Factory.ExportedParts != null && Factory.ExportedParts.Any())
        {
            <ul>
                @foreach (ExportedItem item in Factory.ExportedParts)
                {
                    <li class="exported-part-item">
                        <div class="exported-part-info">
                            <img src="@DisplayService.GetPartImagePath(item.Item.Name)" alt="@item.Item.Name" class="part-image" />
                            <strong>@item.Item.Name</strong> - @item.Item.Quantity per/min (@item.PartQuantityExported per/min exported)
                        </div>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveExportedPart(item)">Remove</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No exported parts defined.</p>
        }

        @if (!isAddingExportedPart)
        {
            <button class="btn btn-primary me-2" @onclick="StartAddingExportedPart">Add Exported Part</button>
        }
        else
        {
            <div class="add-exported-part-form card p-3 mb-3">
                <h5>Add New Exported Part</h5>
                <div class="mb-2">
                    <label>Select Part:</label>
                    <TypeaheadDropdown TItem="Part"
                                     Items="@(Parts?.Values)"
                                     DisplayNameSelector="@(part => DisplayService.GetPartDisplayName(part))"
                                     IdSelector="@(part => DisplayService.GetPartDisplayName(part))"
                                     SelectedItem="@selectedPartToExport"
                                     SelectedItemChanged="@OnExportPartSelected"
                                     Placeholder="Search for parts to export..."
                                     CssClass="me-2">
                        <ItemTemplate Context="part">
                            <strong>@DisplayService.GetPartDisplayName(part)</strong>
                            @if (DisplayService.GetPartIsFluid(part))
                            {
                                <span class="badge badge-small badge-fluid">Fluid</span>
                            }
                            @if (DisplayService.GetPartIsFicsmas(part))
                            {
                                <span class="badge badge-small badge-ficsmas">FICSMAS</span>
                            }
                        </ItemTemplate>
                    </TypeaheadDropdown>
                </div>
                <div class="mb-2">
                    <label>Quantity per/min:</label>
                    <input type="number" class="form-control" @bind="exportedQuantity" min="0" step="0.1" />
                </div>
                <div>
                    <button class="btn btn-success me-2" @onclick="AddExportedPart" disabled="@(selectedPartToExport == null)">Add</button>
                    <button class="btn btn-secondary" @onclick="CancelAddingExportedPart">Cancel</button>
                </div>
            </div>
        }

        <p><b>Component parts:</b></p>
        <ul>
            @if (Factory.ComponentParts != null && Factory.ComponentParts.Any())
            {
                @foreach (Item item in Factory.ComponentParts)
                {
                    <li>
                        <div class="component-part-row">
                            <img src="@DisplayService.GetPartImagePath(item.Name)" alt="@item.Name" class="part-image" />
                            <TypeaheadDropdown TItem="Part"
                                             Items="@(Parts?.Values)"
                                             DisplayNameSelector="@(part => DisplayService.GetPartDisplayName(part))"
                                             IdSelector="@(part => DisplayService.GetPartDisplayName(part))"
                                             SelectedItem="@GetCurrentPart(item)"
                                             SelectedItemChanged="@(part => OnPartSelected(part, item))"
                                             Placeholder="Search for parts..."
                                             CssClass="me-2">
                                <ItemTemplate Context="part">
                                    <strong>@DisplayService.GetPartDisplayName(part)</strong>
                                    @if (DisplayService.GetPartIsFluid(part))
                                    {
                                        <span class="badge badge-small badge-fluid">Fluid</span>
                                    }
                                    @if (DisplayService.GetPartIsFicsmas(part))
                                    {
                                        <span class="badge badge-small badge-ficsmas">FICSMAS</span>
                                    }
                                </ItemTemplate>
                            </TypeaheadDropdown>
                            <span class="quantity-label">Quantity:</span>
                            <input type="text" value="@item.Quantity.ToString()" class="form-control quantity-input" />
                        </div>
                        
                        <div class="component-badges">
                            @if (item.Ingredients != null)
                            {
                                @foreach (Item ingredient in item.Ingredients)
                                {
                                    <span class="badge badge-blue">
                                        <img src="@DisplayService.GetPartImagePath(ingredient.Name)" alt="@ingredient.Name" class="ingredient-image" />
                                        @ingredient.Name @Math.Round(ingredient.Quantity, 1) per/min
                                    </span>
                                }
                            }
                            <span class="badge badge-yellow"> 
                                @if (!string.IsNullOrEmpty(item.Building) && DisplayService.HasBuildingImage(item.Building))
                                {
                                    <img src="@DisplayService.GetBuildingImagePath(item.Building)" alt="@item.Building" class="building-image" />
                                }
                                else if (!string.IsNullOrEmpty(item.Building))
                                {
                                    <i class="fas fa-building building-icon" title="@item.Building"></i>
                                }
                                @item.Building x @Math.Round(item.BuildingQuantity, 2)
                            </span>
                            <span class="badge badge-grey">
                                <i class="fas fa-bolt power-icon" title="Power Usage"></i> @Math.Round(item.BuildingPowerUsage, 1) MW
                            </span>
                        </div>
                    </li>
                    <hr>
                }
            }
            else
            {
                <li>No component parts calculated yet.</li>
            }
        </ul>

        <p><b>Imported parts:</b></p>
        <ul>
            @if (Factory.ImportedParts != null && Factory.ImportedParts.Any())
            {
                @foreach (KeyValuePair<int, ImportedItem> item in Factory.ImportedParts)
                {
                    <li>
                        <img src="@DisplayService.GetPartImagePath(item.Value.Item.Name)" alt="@item.Value.Item.Name" class="part-image" />
                        <strong>@item.Value.Item.Name</strong> - Quantity: @Math.Round(item.Value.Item.Quantity, 1) - from factory: @item.Value.FactoryName (@Math.Round(item.Value.PartQuantityImported, 1) per/min imported)
                    </li>
                }
            }
            else
            {
                <li>No imported parts.</li>
            }
        </ul>

        <p><b>Raw resources:</b></p>
        <span class="badge badge-blue">
            <img src='@DisplayService.GetPartImagePath("OreIron")' alt="OreIron" class="ingredient-image" />
            <span>Iron Ore 60 per/min</span>
        </span>
    </div>
}
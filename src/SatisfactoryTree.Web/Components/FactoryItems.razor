@using SatisfactoryTree.Logic.Models
@using SatisfactoryTree.Web.Services
@using SatisfactoryTree.Logic.Abstractions
@using SatisfactoryTree.Logic.Services
@inject SatisfactoryTree.Logic.Abstractions.IFactoryItemDisplayService DisplayService
@inject PlanService PlanService
@inject PartLookupService PartLookupService
@implements IDisposable
@using System.Linq

@code {
	[Parameter]
	public Factory? Factory { get; set; }
	[Parameter]
	public FactoryCatalog FactoryCatalog { get; set; } = new();

	private bool isAddingExportedPart = false;
	private LookupItem? selectedPartToExport = null; // only for the add-export UI
	private double exportedQuantity = 1.0;
	private Dictionary<string, string>? _partsDisplayLookup; // id -> display name cache

	protected override void OnInitialized()
	{
		PlanService.PlanChanged += OnPlanChanged;
	}

	protected override void OnParametersSet()
	{
		// Use PartLookupService to ensure lookup and cache display names
		try
		{
			PartLookupService.EnsurePartsLookup(FactoryCatalog);
			if (_partsDisplayLookup == null)
			{
				_partsDisplayLookup = PartLookupService.BuildDisplayLookup(FactoryCatalog);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"FactoryItems: Failed initializing lookups: {ex.Message}");
		}
	}

	private string GetPartDisplayName(string partCode)
	{
		if (string.IsNullOrWhiteSpace(partCode))
		{
			return partCode;
		}
		if (_partsDisplayLookup != null && _partsDisplayLookup.TryGetValue(partCode, out var display))
		{
			return display;
		}
		return PartLookupService.GetPartDisplayName(FactoryCatalog, partCode, _partsDisplayLookup);
	}

	private void OnPlanChanged() => InvokeAsync(StateHasChanged);

	public void Dispose() => PlanService.PlanChanged -= OnPlanChanged;

	private LookupItem? GetCurrentLookup(Item item)
	{
		return PartLookupService.GetCurrentLookup(item, FactoryCatalog);
	}

	private void StartAddingExportedPart()
	{
		isAddingExportedPart = true;
		selectedPartToExport = null;
		exportedQuantity = 1.0;
	}

	private void CancelAddingExportedPart()
	{
		isAddingExportedPart = false;
		selectedPartToExport = null;
	}

	private void OnExportPartSelected(LookupItem selectedPart)
	{
		selectedPartToExport = selectedPart;
	}

	private async Task AddExportedPart()
	{
		if (Factory != null && selectedPartToExport != null)
		{
			try
			{
				PlanService.AddExportedPartToFactory(Factory.Id, selectedPartToExport.Id, exportedQuantity);
				isAddingExportedPart = false;
				selectedPartToExport = null;
				await InvokeAsync(StateHasChanged);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error adding exported part: {ex.Message}");
			}
		}
	}

	private async Task RemoveExportedPart(ExportedItem exportedItem)
	{
		if (Factory == null) return;
		try
		{
			PlanService.RemoveExportedPartFromFactory(Factory.Id, exportedItem.Item.Name);
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error removing exported part: {ex.Message}");
		}
	}

	private async Task AddAllMissingIngredients()
	{
		if (Factory == null) return;
		try
		{
			PlanService.AddAllMissingIngredients(Factory.Id);
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding missing ingredients: {ex.Message}");
		}
	}

	private async Task AddMissingIngredientsForItem(Item item)
	{
		if (Factory == null || item == null) return;
		try
		{
			PlanService.AddMissingIngredientsForItem(Factory.Id, item);
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding missing ingredients for item: {ex.Message}");
		}
	}

	private List<string> GetMissingIngredients()
	{
		if (Factory == null) return new List<string>();
		return PlanService.GetMissingIngredients(Factory.Id);
	}
}

@if (Factory != null)
{
	<div class="factory-container">
		<h3><input type="text" value="@Factory.Name" class="form-control" /></h3>

		<p><b>Exported parts:</b></p>
		@if (Factory.ExportedParts != null && Factory.ExportedParts.Any(e => Factory.UserDefinedExports.Contains(e.Item.Name)))
		{
			<ul>
				@foreach (ExportedItem item in Factory.ExportedParts.Where(e => Factory.UserDefinedExports.Contains(e.Item.Name)))
				{
					<li class="exported-part-item">
						<div class="exported-part-info">
							<img src="@DisplayService.GetPartImagePath(GetPartDisplayName(item.Item.Name))" alt="@GetPartDisplayName(item.Item.Name)" class="part-image" />
							<strong>@GetPartDisplayName(item.Item.Name)</strong> - @item.Item.Quantity per/min (@item.PartQuantityExported per/min exported)
						</div>
						<button class="btn btn-sm btn-danger" @onclick="() => RemoveExportedPart(item)">Remove</button>
					</li>
				}
			</ul>
		}
		else
		{
			<p class="text-muted">No exported parts defined.</p>
		}

		@if (!isAddingExportedPart)
		{
			<button class="btn btn-primary me-2" @onclick="StartAddingExportedPart">Add Exported Part</button>
		}
		else
		{
			<div class="add-exported-part-form card p-3 mb-3">
				<h5>Add New Exported Part</h5>
				<div class="mb-2">
					<label>Select Part:</label>
					<TypeaheadDropdown TItem="LookupItem"
									   Items="@FactoryCatalog.PartsLookup"
									   DisplayNameSelector="@(p => p.Name)"
									   IdSelector="@(p => p.Id)"
									   SelectedItem="@selectedPartToExport"
									   SelectedItemChanged="@OnExportPartSelected"
									   Placeholder="Search for parts to export..."
									   CssClass="me-2" />
				</div>
				<div class="mb-2">
					<label>Quantity per/min:</label>
					<input type="number" class="form-control" @bind="exportedQuantity" min="0" step="0.1" />
				</div>
				<div>
					<button class="btn btn-success me-2" @onclick="AddExportedPart" disabled="@(selectedPartToExport == null)">Add</button>
					<button class="btn btn-secondary" @onclick="CancelAddingExportedPart">Cancel</button>
				</div>
			</div>
		}

		<p><b>Component parts:</b></p>
		<ul>
			@if (Factory.ComponentParts != null && Factory.ComponentParts.Any())
			{
				@foreach (Item item in Factory.ComponentParts)
				{
					<li>
						@if (item.HasMissingIngredients)
						{
							<div class="alert alert-warning d-flex justify-content-between align-items-center mb-2" style="padding: 0.5rem 0.75rem;">
								<div>
									<i class="fas fa-exclamation-triangle me-2"></i>
									<strong>Missing Ingredients:</strong> 
									@foreach (var missingIngredient in item.MissingIngredients)
									{
										<span class="badge badge-red ms-1">@GetPartDisplayName(missingIngredient)</span>
									}
								</div>
								<button class="btn btn-sm btn-primary" @onclick="() => AddMissingIngredientsForItem(item)">
									<i class="fas fa-plus-circle me-1"></i>Add Missing Ingredients
								</button>
							</div>
						}
						<div class="component-part-row">
							<img src="@DisplayService.GetPartImagePath(GetPartDisplayName(item.Name))" alt="@GetPartDisplayName(item.Name)" class="part-image" />
							<TypeaheadDropdown TItem="LookupItem"
									   Items="@FactoryCatalog.PartsLookup"
									   DisplayNameSelector="@(p => p.Name)"
									   IdSelector="@(p => p.Id)"
									   SelectedItem="@GetCurrentLookup(item)"
									   SelectedItemChanged="@(lookup => { if (lookup != null) item.Name = lookup.Id; })"
									   Placeholder="Search for parts..."
									   CssClass="me-2" />
							<span class="quantity-label">Quantity:</span>
							<input type="text" value="@item.Quantity.ToString()" class="form-control quantity-input" />
						</div>

						<div class="component-badges">
							@if (item.Ingredients != null)
							{
								@foreach (Item ingredient in item.Ingredients)
								{
									<span class="badge badge-blue">
										<img src="@DisplayService.GetPartImagePath(GetPartDisplayName(ingredient.Name))" alt="@GetPartDisplayName(ingredient.Name)" class="ingredient-image" />
										@GetPartDisplayName(ingredient.Name) @Math.Round(ingredient.Quantity, 1) per/min
									</span>
								}
							}
							@if (item.HasMissingIngredients)
							{
								@foreach (var missingIngredient in item.MissingIngredients)
								{
									<span class="badge badge-red" title="Missing ingredient - not available as import">
										<i class="fas fa-exclamation-triangle me-1"></i>
										@GetPartDisplayName(missingIngredient) (Missing)
									</span>
								}
							}
							<span class="badge badge-yellow">
								@if (!string.IsNullOrEmpty(item.Building) && DisplayService.HasBuildingImage(item.Building))
								{
									<img src="@DisplayService.GetBuildingImagePath(item.Building)" alt="@DisplayService.GetBuildingName(item.Building)" class="building-image" />
								}
								else if (!string.IsNullOrEmpty(item.Building))
								{
									<i class="fas fa-building building-icon" title="@item.Building"></i>
								}
								@DisplayService.GetBuildingName(item.Building) x @Math.Round(item.BuildingQuantity, 2)
							</span>
							<span class="badge badge-grey">
								<i class="fas fa-bolt power-icon" title="Power Usage"></i> @Math.Round(item.BuildingPowerUsage, 1) MW
							</span>
						</div>
					</li>
					<hr>
				}
			}
			else
			{
				<li>No component parts calculated yet.</li>
			}
		</ul>

		<p><b>Imported parts:</b></p>
		<ul>
			@if (Factory.ImportedParts != null && Factory.ImportedParts.Any())
			{
				@foreach (KeyValuePair<int, ImportedItem> item in Factory.ImportedParts)
				{
					<li>
						<img src="@DisplayService.GetPartImagePath(GetPartDisplayName(item.Value.Item.Name))" alt="@GetPartDisplayName(item.Value.Item.Name)" class="part-image" />
						<strong>@GetPartDisplayName(item.Value.Item.Name)</strong> - Quantity: @Math.Round(item.Value.Item.Quantity, 1) - from factory: @item.Value.FactoryName (@Math.Round(item.Value.PartQuantityImported, 1) per/min imported)
					</li>
				}
			}
			else
			{
				<li>No imported parts.</li>
			}
		</ul>

		<p><b>Raw resources:</b></p>
		<span class="badge badge-blue">
			<img src="@DisplayService.GetPartImagePath(GetPartDisplayName("OreIron"))" alt="@GetPartDisplayName("OreIron")" class="ingredient-image" />
			<span>@GetPartDisplayName("OreIron") 60 per/min</span>
		</span>
	</div>
}
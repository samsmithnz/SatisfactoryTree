@using SatisfactoryTree.Logic.Models

@code {
    [Parameter]
    public Factory? Factory { get; set; }
    [Parameter]
    public Dictionary<string, Part>? Parts { get; set; }

    private void OnPartSelected(Part selectedPart, Item item)
    {
        item.Name = selectedPart.Name ?? selectedPart.Name ?? "";
        StateHasChanged();
    }

    private Part? GetCurrentPart(Item item)
    {
        if (Parts == null) return null;
        Parts.TryGetValue(item.Name, out Part? part);
        return part;
    }

    private string GetPartImagePath(string partName)
    {
        // Handle special mapping cases where the part name doesn't directly match the image name
        string imageName = partName switch
        {
            "IronPlateReinforced" => "ReinforcedIronPlate",
            "OreIron" => "IronOre", 
            "IronScrew" => "IronScrews",
            _ => partName.Replace(" ", "") // Default: remove spaces
        };

        return $"images/parts/{imageName}_256.png";
    }

    private string GetBuildingImagePath(string buildingName)
    {
        // Handle building name mappings to match image files
        string imageName = buildingName switch
        {
            "smeltermk1" => "SmelterMk1_256.png",
            "foundry" => "Foundry_256.png",
            "constructormk1" => "ConstructorMk1_256.png",
            "assemblermk1" => "AssemblerMk1_256.png",
            "manufacturer" => "Manufacturer_256.png",
            "refinery" => "OilRefinery_256.png",
            "packager" => "Packager_256.png",
            "blender" => "Blender_256.png",
            "hadronCollider" => "ParticleAccelerator_256.png",
            "generatorcoal" => "CoalGenerator_256.png",
            "generatorfuel" => "FuelGenerator_256.png",
            "generatornuclear" => "NuclearPowerplant_256.png",
            "generatorbiomass" => "BiomassBurner_256.png",
            "generatorgeothermal" => "GeothermalPowerGenerator_256.png",
            "minermk1" => "MinerMk1_256.png",
            "minermk2" => "MinerMk2_256.png",
            "minermk3" => "MinerMk3_256.png",
            "oilpump" => "OilExtractor_256.png",
            "waterpump" => "WaterExtractor_256.png",
            "frackingextractor" => "ResourceWellExtractor_256.png",
            "frackingsmasher" => "ResourceWellPressurizer_256.png",
            "resourcesink" => "ResourceSink_256.png",
            _ => $"{buildingName}_256.png" // Default: use building name as-is
        };

        return $"images/buildings/{imageName}";
    }

    private bool HasBuildingImage(string buildingName)
    {
        // Check if we have a specific image mapping for this building
        return buildingName switch
        {
            "smeltermk1" or "foundry" or "constructormk1" or "assemblermk1" or "manufacturer" or
            "refinery" or "packager" or "blender" or "hadronCollider" or
            "generatorcoal" or "generatorfuel" or "generatornuclear" or
            "generatorbiomass" or "generatorgeothermal" or
            "minermk1" or "minermk2" or "minermk3" or
            "oilpump" or "waterpump" or "frackingextractor" or
            "frackingsmasher" or "resourcesink" => true,
            _ => false
        };
    }

    private string GetPartDisplayName(Part part)
    {
        return part.Name ?? part.Name ?? "Unknown";
    }

    private bool GetPartIsFluid(Part part)
    {
        return part.IsFluid || part.IsFluid;
    }

    private bool GetPartIsFicsmas(Part part)
    {
        return part.IsFicsmas || part.IsFicsmas;
    }
}

@if (Factory != null)
{
    <div class="factory-container">
        <h3><input type="text" value="@Factory.Name" /></h3>
        @if (Factory.TargetParts != null && Factory.TargetParts.Any())
        {
            <p><b>Target parts:</b></p>
            <ul>
                @foreach (Item item in Factory.TargetParts)
                {
                    <li>
                        <img src="@GetPartImagePath(item.Name)" alt="@item.Name" class="part-image" />
                        <strong>@item.Name</strong> - @item.Quantity per/min
                    </li>
                }
            </ul>

            <p><b>Component parts:</b></p>
            <ul>
                @if (Factory.ComponentParts != null && Factory.ComponentParts.Any())
                {
                    @foreach (Item item in Factory.ComponentParts)
                    {
                        <li>
                            <img src="@GetPartImagePath(item.Name)" alt="@item.Name" class="part-image" />
                            <TypeaheadDropdown TItem="Part"
                                             Items="@(Parts?.Values)"
                                             DisplayNameSelector="@(part => GetPartDisplayName(part))"
                                             IdSelector="@(part => GetPartDisplayName(part))"
                                             SelectedItem="@GetCurrentPart(item)"
                                             SelectedItemChanged="@(part => OnPartSelected(part, item))"
                                             Placeholder="Search for parts..."
                                             CssClass="me-2">
                                <ItemTemplate Context="part">
                                    <strong>@GetPartDisplayName(part)</strong>
                                    @if (GetPartIsFluid(part))
                                    {
                                        <span class="badge badge-fluid">Fluid</span>
                                    }
                                    @if (GetPartIsFicsmas(part))
                                    {
                                        <span class="badge badge-ficsmas">FICSMAS</span>
                                    }
                                </ItemTemplate>
                            </TypeaheadDropdown>
                            Quantity: <input type="text" value="@item.Quantity.ToString()"><br>
                            @if (item.Ingredients != null)
                            {
                                @foreach (Item ingredient in item.Ingredients)
                                {
                                    <span class="badge badge-blue">
                                        <img src="@GetPartImagePath(ingredient.Name)" alt="@ingredient.Name" class="ingredient-image" />
                                        @ingredient.Name @ingredient.Quantity per/min
                                    </span>
                                }
                            }
                            <span class="badge badge-yellow"> 
                            @if (!string.IsNullOrEmpty(item.Building) && HasBuildingImage(item.Building))
                            {
                                <img src="@GetBuildingImagePath(item.Building)" alt="@item.Building" class="building-image" />
                            }
                            else if (!string.IsNullOrEmpty(item.Building))
                            {
                                <i class="fas fa-building building-icon" title="@item.Building"></i>
                            }
                            @item.Building x@item.BuildingQuantity
                            </span>
                            <span class="badge badge-grey">
                                <i class="fas fa-bolt" title="Power Usage"></i> @item.BuildingPowerUsage MW
                            </span>
                           
                        </li>
                        <hr>
                    }
                }
                else
                {
                    <li>No component parts.</li>
                }
            </ul>

            <p><b>Imported parts:</b></p>
            <ul>
                @if (Factory.ImportedParts != null && Factory.ImportedParts.Any())
                {
                    @foreach (KeyValuePair<int, Item> item in Factory.ImportedParts)
                    {
                        <li>
                            <img src="@GetPartImagePath(item.Value.Name)" alt="@item.Value.Name" class="part-image" />
                            <strong>@item.Value.Name</strong> - Quantity: @item.Value.Quantity - from factory: @item.Key
                        </li>
                    }
                }
                else
                {
                    <li>No imported parts.</li>
                }
            </ul>

            <p><b>Raw resources:</b></p>
            <span class="badge badge-blue">
                <img src='@GetPartImagePath("OreIron")' alt="OreIron" class="ingredient-image" />
                <span>Iron Ore 60 per/min</span>
            </span>
        }
        else
        {
            <p>No items in this factory.</p>
        }
    </div>
}

<style>
    .factory-container {
        max-width: 800px;
        margin: 20px 0;
    }
    
    .me-2 {
        margin-right: 10px;
    }

    .part-image {
        width: 42px;
        height: 42px;
        margin-right: 8px;
        vertical-align: middle;
        border-radius: 4px;
        object-fit: cover;
    }

    .ingredient-image {
        width: 32px;
        height: 32px;
        margin-right: 8px;
        vertical-align: middle;
        border-radius: 4px;
        object-fit: cover;
    }

    .building-image {
        width: 32px;
        height: 32px;
        margin-left: 4px;
        margin-right: 4px;
        vertical-align: middle;
        border-radius: 4px;
        object-fit: cover;
        border: 1px solid #ddd;
    }

    .building-icon {
        font-size: 24px;
        width: 32px;
        height: 32px;
        margin-left: 4px;
        margin-right: 4px;
        vertical-align: middle;
        color: #6c757d;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .building-icon:hover {
        color: #495057;
        background-color: #e9ecef;
    }
</style>
@using SatisfactoryTree.Logic.Models

@code {
    [Parameter]
    public Factory? Factory { get; set; }
    [Parameter]
    public Dictionary<string, Part>? Parts { get; set; }

    private void OnPartSelected(Part selectedPart, Item item)
    {
        item.Name = selectedPart.Name;
        StateHasChanged();
    }

    private Part? GetCurrentPart(Item item)
    {
        if (Parts == null) return null;
        Parts.TryGetValue(item.Name, out Part? part);
        return part;
    }
}

<div class="factory-container">
    <p><b>Factory parts:</b></p>
    @if (Factory?.TargetParts != null && Factory.TargetParts.Any())
    {
        <ul>
            @foreach (Item item in Factory.TargetParts)
            {
                <li>
                    <strong>@item.Name</strong> - Quantity: @item.Quantity
                </li>
            }
        </ul>

        <p><b>Component parts:</b></p>
        <ul>
            @if (Factory?.ComponentParts != null && Factory.ComponentParts.Any())
            {
                @foreach (var item in Factory.ComponentParts)
                {
                    <li>
                        <TypeaheadDropdown TItem="Part"
                                         Items="@(Parts?.Values)"
                                         DisplayNameSelector="@(part => part.Name)"
                                         IdSelector="@(part => part.Name)"
                                         SelectedItem="@GetCurrentPart(item)"
                                         SelectedItemChanged="@(part => OnPartSelected(part, item))"
                                         Placeholder="Search for parts..."
                                         CssClass="me-2">
                            <ItemTemplate Context="part">
                                <strong>@part.Name</strong>
                                @if (part.IsFluid)
                                {
                                    <span class="badge badge-fluid">Fluid</span>
                                }
                                @if (part.IsFicsmas)
                                {
                                    <span class="badge badge-ficsmas">FICSMAS</span>
                                }
                            </ItemTemplate>
                        </TypeaheadDropdown>
                        <strong>@item.Name</strong> - Quantity: @item.Quantity - Building: @item.Building x @item.BuildingQuantity
                    </li>
                }
            }
            else
            {
                <li>No component parts.</li>
            }
        </ul>

        <p><b>Imported parts:</b></p>
        <ul>
            @if (Factory?.ImportedParts != null && Factory.ImportedParts.Any())
            {
                @foreach (Item item in Factory.ImportedParts)
                {
                    <li>
                        <strong>@item.Name</strong> - Quantity: @item.Quantity - from factory: TBD
                    </li>
                }
            }
            else
            {
                <li>No imported parts.</li>
            }
        </ul>
    }
    else
    {
        <p>No items in this factory.</p>
    }
</div>

<style>
    .factory-container {
        max-width: 800px;
        margin: 20px 0;
    }
    
    .me-2 {
        margin-right: 10px;
    }
</style>